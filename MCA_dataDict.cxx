//
// File generated by rootcint at Wed May  9 22:20:18 2012

// Do NOT change. Changes will be lost next time file is generated
//

#define R__DICTIONARY_FILENAME MCA_dataDict
#include "RConfig.h" //rootcint 4834
#if !defined(R__ACCESS_IN_SYMBOL)
//Break the privacy of classes -- Disabled for the moment
#define private public
#define protected public
#endif

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;
#include "MCA_dataDict.h"

#include "TCollectionProxyInfo.h"
#include "TClass.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"

// START OF SHADOWS

namespace ROOT {
   namespace Shadow {
   } // of namespace Shadow
} // of namespace ROOT
// END OF SHADOWS

namespace ROOT {
   void MCA_data_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_MCA_data(void *p = 0);
   static void *newArray_MCA_data(Long_t size, void *p);
   static void delete_MCA_data(void *p);
   static void deleteArray_MCA_data(void *p);
   static void destruct_MCA_data(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::MCA_data*)
   {
      ::MCA_data *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::MCA_data >(0);
      static ::ROOT::TGenericClassInfo 
         instance("MCA_data", ::MCA_data::Class_Version(), "./MCA_data.h", 12,
                  typeid(::MCA_data), DefineBehavior(ptr, ptr),
                  &::MCA_data::Dictionary, isa_proxy, 4,
                  sizeof(::MCA_data) );
      instance.SetNew(&new_MCA_data);
      instance.SetNewArray(&newArray_MCA_data);
      instance.SetDelete(&delete_MCA_data);
      instance.SetDeleteArray(&deleteArray_MCA_data);
      instance.SetDestructor(&destruct_MCA_data);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::MCA_data*)
   {
      return GenerateInitInstanceLocal((::MCA_data*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::MCA_data*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void CalMCA_data_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_CalMCA_data(void *p = 0);
   static void *newArray_CalMCA_data(Long_t size, void *p);
   static void delete_CalMCA_data(void *p);
   static void deleteArray_CalMCA_data(void *p);
   static void destruct_CalMCA_data(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::CalMCA_data*)
   {
      ::CalMCA_data *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::CalMCA_data >(0);
      static ::ROOT::TGenericClassInfo 
         instance("CalMCA_data", ::CalMCA_data::Class_Version(), "./MCA_data.h", 44,
                  typeid(::CalMCA_data), DefineBehavior(ptr, ptr),
                  &::CalMCA_data::Dictionary, isa_proxy, 4,
                  sizeof(::CalMCA_data) );
      instance.SetNew(&new_CalMCA_data);
      instance.SetNewArray(&newArray_CalMCA_data);
      instance.SetDelete(&delete_CalMCA_data);
      instance.SetDeleteArray(&deleteArray_CalMCA_data);
      instance.SetDestructor(&destruct_CalMCA_data);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::CalMCA_data*)
   {
      return GenerateInitInstanceLocal((::CalMCA_data*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::CalMCA_data*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void SourceData_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_SourceData(void *p = 0);
   static void *newArray_SourceData(Long_t size, void *p);
   static void delete_SourceData(void *p);
   static void deleteArray_SourceData(void *p);
   static void destruct_SourceData(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::SourceData*)
   {
      ::SourceData *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::SourceData >(0);
      static ::ROOT::TGenericClassInfo 
         instance("SourceData", ::SourceData::Class_Version(), "./MCA_data.h", 57,
                  typeid(::SourceData), DefineBehavior(ptr, ptr),
                  &::SourceData::Dictionary, isa_proxy, 4,
                  sizeof(::SourceData) );
      instance.SetNew(&new_SourceData);
      instance.SetNewArray(&newArray_SourceData);
      instance.SetDelete(&delete_SourceData);
      instance.SetDeleteArray(&deleteArray_SourceData);
      instance.SetDestructor(&destruct_SourceData);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::SourceData*)
   {
      return GenerateInitInstanceLocal((::SourceData*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::SourceData*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void GeCalibrate_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_GeCalibrate(void *p = 0);
   static void *newArray_GeCalibrate(Long_t size, void *p);
   static void delete_GeCalibrate(void *p);
   static void deleteArray_GeCalibrate(void *p);
   static void destruct_GeCalibrate(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::GeCalibrate*)
   {
      ::GeCalibrate *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::GeCalibrate >(0);
      static ::ROOT::TGenericClassInfo 
         instance("GeCalibrate", ::GeCalibrate::Class_Version(), "./MCA_data.h", 95,
                  typeid(::GeCalibrate), DefineBehavior(ptr, ptr),
                  &::GeCalibrate::Dictionary, isa_proxy, 4,
                  sizeof(::GeCalibrate) );
      instance.SetNew(&new_GeCalibrate);
      instance.SetNewArray(&newArray_GeCalibrate);
      instance.SetDelete(&delete_GeCalibrate);
      instance.SetDeleteArray(&deleteArray_GeCalibrate);
      instance.SetDestructor(&destruct_GeCalibrate);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::GeCalibrate*)
   {
      return GenerateInitInstanceLocal((::GeCalibrate*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::GeCalibrate*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void IsotopeDB_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_IsotopeDB(void *p = 0);
   static void *newArray_IsotopeDB(Long_t size, void *p);
   static void delete_IsotopeDB(void *p);
   static void deleteArray_IsotopeDB(void *p);
   static void destruct_IsotopeDB(void *p);
   static void streamer_IsotopeDB(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::IsotopeDB*)
   {
      ::IsotopeDB *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::IsotopeDB >(0);
      static ::ROOT::TGenericClassInfo 
         instance("IsotopeDB", ::IsotopeDB::Class_Version(), "./MCA_data.h", 152,
                  typeid(::IsotopeDB), DefineBehavior(ptr, ptr),
                  &::IsotopeDB::Dictionary, isa_proxy, 0,
                  sizeof(::IsotopeDB) );
      instance.SetNew(&new_IsotopeDB);
      instance.SetNewArray(&newArray_IsotopeDB);
      instance.SetDelete(&delete_IsotopeDB);
      instance.SetDeleteArray(&deleteArray_IsotopeDB);
      instance.SetDestructor(&destruct_IsotopeDB);
      instance.SetStreamerFunc(&streamer_IsotopeDB);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::IsotopeDB*)
   {
      return GenerateInitInstanceLocal((::IsotopeDB*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::IsotopeDB*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

namespace ROOT {
   void Isotope_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void *new_Isotope(void *p = 0);
   static void *newArray_Isotope(Long_t size, void *p);
   static void delete_Isotope(void *p);
   static void deleteArray_Isotope(void *p);
   static void destruct_Isotope(void *p);
   static void streamer_Isotope(TBuffer &buf, void *obj);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::Isotope*)
   {
      ::Isotope *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TInstrumentedIsAProxy< ::Isotope >(0);
      static ::ROOT::TGenericClassInfo 
         instance("Isotope", ::Isotope::Class_Version(), "./MCA_data.h", 130,
                  typeid(::Isotope), DefineBehavior(ptr, ptr),
                  &::Isotope::Dictionary, isa_proxy, 0,
                  sizeof(::Isotope) );
      instance.SetNew(&new_Isotope);
      instance.SetNewArray(&newArray_Isotope);
      instance.SetDelete(&delete_Isotope);
      instance.SetDeleteArray(&deleteArray_Isotope);
      instance.SetDestructor(&destruct_Isotope);
      instance.SetStreamerFunc(&streamer_Isotope);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::Isotope*)
   {
      return GenerateInitInstanceLocal((::Isotope*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const ::Isotope*)0x0); R__UseDummy(_R__UNIQUE_(Init));
} // end of namespace ROOT

//______________________________________________________________________________
TClass *MCA_data::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *MCA_data::Class_Name()
{
   return "MCA_data";
}

//______________________________________________________________________________
const char *MCA_data::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCA_data*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int MCA_data::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::MCA_data*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void MCA_data::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCA_data*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *MCA_data::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::MCA_data*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *CalMCA_data::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *CalMCA_data::Class_Name()
{
   return "CalMCA_data";
}

//______________________________________________________________________________
const char *CalMCA_data::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::CalMCA_data*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int CalMCA_data::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::CalMCA_data*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void CalMCA_data::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::CalMCA_data*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *CalMCA_data::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::CalMCA_data*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *SourceData::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *SourceData::Class_Name()
{
   return "SourceData";
}

//______________________________________________________________________________
const char *SourceData::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SourceData*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int SourceData::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::SourceData*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void SourceData::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SourceData*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *SourceData::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::SourceData*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *GeCalibrate::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *GeCalibrate::Class_Name()
{
   return "GeCalibrate";
}

//______________________________________________________________________________
const char *GeCalibrate::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GeCalibrate*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int GeCalibrate::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::GeCalibrate*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void GeCalibrate::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GeCalibrate*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *GeCalibrate::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::GeCalibrate*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *IsotopeDB::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *IsotopeDB::Class_Name()
{
   return "IsotopeDB";
}

//______________________________________________________________________________
const char *IsotopeDB::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::IsotopeDB*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int IsotopeDB::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::IsotopeDB*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void IsotopeDB::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::IsotopeDB*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *IsotopeDB::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::IsotopeDB*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
TClass *Isotope::fgIsA = 0;  // static to hold class pointer

//______________________________________________________________________________
const char *Isotope::Class_Name()
{
   return "Isotope";
}

//______________________________________________________________________________
const char *Isotope::ImplFileName()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Isotope*)0x0)->GetImplFileName();
}

//______________________________________________________________________________
int Isotope::ImplFileLine()
{
   return ::ROOT::GenerateInitInstanceLocal((const ::Isotope*)0x0)->GetImplFileLine();
}

//______________________________________________________________________________
void Isotope::Dictionary()
{
   fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Isotope*)0x0)->GetClass();
}

//______________________________________________________________________________
TClass *Isotope::Class()
{
   if (!fgIsA) fgIsA = ::ROOT::GenerateInitInstanceLocal((const ::Isotope*)0x0)->GetClass();
   return fgIsA;
}

//______________________________________________________________________________
void MCA_data::Streamer(TBuffer &R__b)
{
   // Stream an object of class MCA_data.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(MCA_data::Class(),this);
   } else {
      R__b.WriteClassBuffer(MCA_data::Class(),this);
   }
}

//______________________________________________________________________________
void MCA_data::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class MCA_data.
      TClass *R__cl = ::MCA_data::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dreal_time", &dreal_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dlive_time", &dlive_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "istart_time", &istart_time);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "ichannels", &ichannels);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hdata", &hdata);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*soutfilename", &soutfilename);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*sshortname", &sshortname);
      TNamed::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_MCA_data(void *p) {
      return  p ? new(p) ::MCA_data : new ::MCA_data;
   }
   static void *newArray_MCA_data(Long_t nElements, void *p) {
      return p ? new(p) ::MCA_data[nElements] : new ::MCA_data[nElements];
   }
   // Wrapper around operator delete
   static void delete_MCA_data(void *p) {
      delete ((::MCA_data*)p);
   }
   static void deleteArray_MCA_data(void *p) {
      delete [] ((::MCA_data*)p);
   }
   static void destruct_MCA_data(void *p) {
      typedef ::MCA_data current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::MCA_data

//______________________________________________________________________________
void CalMCA_data::Streamer(TBuffer &R__b)
{
   // Stream an object of class CalMCA_data.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(CalMCA_data::Class(),this);
   } else {
      R__b.WriteClassBuffer(CalMCA_data::Class(),this);
   }
}

//______________________________________________________________________________
void CalMCA_data::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class CalMCA_data.
      TClass *R__cl = ::CalMCA_data::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*hCalData", &hCalData);
      MCA_data::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_CalMCA_data(void *p) {
      return  p ? new(p) ::CalMCA_data : new ::CalMCA_data;
   }
   static void *newArray_CalMCA_data(Long_t nElements, void *p) {
      return p ? new(p) ::CalMCA_data[nElements] : new ::CalMCA_data[nElements];
   }
   // Wrapper around operator delete
   static void delete_CalMCA_data(void *p) {
      delete ((::CalMCA_data*)p);
   }
   static void deleteArray_CalMCA_data(void *p) {
      delete [] ((::CalMCA_data*)p);
   }
   static void destruct_CalMCA_data(void *p) {
      typedef ::CalMCA_data current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::CalMCA_data

//______________________________________________________________________________
void GeCalibrate::Streamer(TBuffer &R__b)
{
   // Stream an object of class GeCalibrate.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(GeCalibrate::Class(),this);
   } else {
      R__b.WriteClassBuffer(GeCalibrate::Class(),this);
   }
}

//______________________________________________________________________________
void GeCalibrate::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class GeCalibrate.
      TClass *R__cl = ::GeCalibrate::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vpData", (void*)&vpData);
      R__insp.InspectMember("vector<SourceData*>", (void*)&vpData, "vpData.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*calplot", &calplot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dSlope", &dSlope);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dOffset", &dOffset);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "valid_calibration", &valid_calibration);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "cal_date", &cal_date);
      R__insp.InspectMember(cal_date, "cal_date.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*linplot", &linplot);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "*effplot", &effplot);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_GeCalibrate(void *p) {
      return  p ? new(p) ::GeCalibrate : new ::GeCalibrate;
   }
   static void *newArray_GeCalibrate(Long_t nElements, void *p) {
      return p ? new(p) ::GeCalibrate[nElements] : new ::GeCalibrate[nElements];
   }
   // Wrapper around operator delete
   static void delete_GeCalibrate(void *p) {
      delete ((::GeCalibrate*)p);
   }
   static void deleteArray_GeCalibrate(void *p) {
      delete [] ((::GeCalibrate*)p);
   }
   static void destruct_GeCalibrate(void *p) {
      typedef ::GeCalibrate current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::GeCalibrate

//______________________________________________________________________________
void SourceData::Streamer(TBuffer &R__b)
{
   // Stream an object of class SourceData.

   if (R__b.IsReading()) {
      R__b.ReadClassBuffer(SourceData::Class(),this);
   } else {
      R__b.WriteClassBuffer(SourceData::Class(),this);
   }
}

//______________________________________________________________________________
void SourceData::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class SourceData.
      TClass *R__cl = ::SourceData::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vdGammaEnergy", (void*)&vdGammaEnergy);
      R__insp.InspectMember("vector<double>", (void*)&vdGammaEnergy, "vdGammaEnergy.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vdLineIntensity", (void*)&vdLineIntensity);
      R__insp.InspectMember("vector<double>", (void*)&vdLineIntensity, "vdLineIntensity.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vdChannelNumber", (void*)&vdChannelNumber);
      R__insp.InspectMember("vector<double>", (void*)&vdChannelNumber, "vdChannelNumber.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dSourceStrength", &dSourceStrength);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dHalfLife", &dHalfLife);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tReferenceDate", &tReferenceDate);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sIsotopeName", &sIsotopeName);
      R__insp.InspectMember(sIsotopeName, "sIsotopeName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "sFileName", &sFileName);
      R__insp.InspectMember(sFileName, "sFileName.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "data", &data);
      R__insp.InspectMember(data, "data.");
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_SourceData(void *p) {
      return  p ? new(p) ::SourceData : new ::SourceData;
   }
   static void *newArray_SourceData(Long_t nElements, void *p) {
      return p ? new(p) ::SourceData[nElements] : new ::SourceData[nElements];
   }
   // Wrapper around operator delete
   static void delete_SourceData(void *p) {
      delete ((::SourceData*)p);
   }
   static void deleteArray_SourceData(void *p) {
      delete [] ((::SourceData*)p);
   }
   static void destruct_SourceData(void *p) {
      typedef ::SourceData current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::SourceData

//______________________________________________________________________________
void Isotope::Streamer(TBuffer &R__b)
{
   // Stream an object of class Isotope.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      tsname.Streamer(R__b);
      {
         vector<double> &R__stl =  vdenergy;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      {
         vector<double> &R__stl =  vdintensity;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            double R__t;
            R__b >> R__t;
            R__stl.push_back(R__t);
         }
      }
      R__b >> dhalflife;
      R__b.CheckByteCount(R__s, R__c, Isotope::IsA());
   } else {
      R__c = R__b.WriteVersion(Isotope::IsA(), kTRUE);
      TObject::Streamer(R__b);
      tsname.Streamer(R__b);
      {
         vector<double> &R__stl =  vdenergy;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      {
         vector<double> &R__stl =  vdintensity;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<double>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            R__b << (*R__k);
            }
         }
      }
      R__b << dhalflife;
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void Isotope::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class Isotope.
      TClass *R__cl = ::Isotope::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "tsname", &tsname);
      R__insp.InspectMember(tsname, "tsname.");
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vdenergy", (void*)&vdenergy);
      R__insp.InspectMember("vector<double>", (void*)&vdenergy, "vdenergy.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vdintensity", (void*)&vdintensity);
      R__insp.InspectMember("vector<double>", (void*)&vdintensity, "vdintensity.", false);
      R__insp.Inspect(R__cl, R__insp.GetParent(), "dhalflife", &dhalflife);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_Isotope(void *p) {
      return  p ? new(p) ::Isotope : new ::Isotope;
   }
   static void *newArray_Isotope(Long_t nElements, void *p) {
      return p ? new(p) ::Isotope[nElements] : new ::Isotope[nElements];
   }
   // Wrapper around operator delete
   static void delete_Isotope(void *p) {
      delete ((::Isotope*)p);
   }
   static void deleteArray_Isotope(void *p) {
      delete [] ((::Isotope*)p);
   }
   static void destruct_Isotope(void *p) {
      typedef ::Isotope current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_Isotope(TBuffer &buf, void *obj) {
      ((::Isotope*)obj)->::Isotope::Streamer(buf);
   }
} // end of namespace ROOT for class ::Isotope

//______________________________________________________________________________
void IsotopeDB::Streamer(TBuffer &R__b)
{
   // Stream an object of class IsotopeDB.

   UInt_t R__s, R__c;
   if (R__b.IsReading()) {
      Version_t R__v = R__b.ReadVersion(&R__s, &R__c); if (R__v) { }
      TObject::Streamer(R__b);
      {
         vector<Isotope> &R__stl =  vIdb;
         R__stl.clear();
         int R__i, R__n;
         R__b >> R__n;
         R__stl.reserve(R__n);
         for (R__i = 0; R__i < R__n; R__i++) {
            Isotope R__t;
            R__t.Streamer(R__b);
            R__stl.push_back(R__t);
         }
      }
      R__b.CheckByteCount(R__s, R__c, IsotopeDB::IsA());
   } else {
      R__c = R__b.WriteVersion(IsotopeDB::IsA(), kTRUE);
      TObject::Streamer(R__b);
      {
         vector<Isotope> &R__stl =  vIdb;
         int R__n=(&R__stl) ? int(R__stl.size()) : 0;
         R__b << R__n;
         if(R__n) {
            vector<Isotope>::iterator R__k;
            for (R__k = R__stl.begin(); R__k != R__stl.end(); ++R__k) {
            ((Isotope&)(*R__k)).Streamer(R__b);
            }
         }
      }
      R__b.SetByteCount(R__c, kTRUE);
   }
}

//______________________________________________________________________________
void IsotopeDB::ShowMembers(TMemberInspector &R__insp)
{
      // Inspect the data members of an object of class IsotopeDB.
      TClass *R__cl = ::IsotopeDB::IsA();
      if (R__cl || R__insp.IsA()) { }
      R__insp.Inspect(R__cl, R__insp.GetParent(), "vIdb", (void*)&vIdb);
      R__insp.InspectMember("vector<Isotope>", (void*)&vIdb, "vIdb.", false);
      TObject::ShowMembers(R__insp);
}

namespace ROOT {
   // Wrappers around operator new
   static void *new_IsotopeDB(void *p) {
      return  p ? new(p) ::IsotopeDB : new ::IsotopeDB;
   }
   static void *newArray_IsotopeDB(Long_t nElements, void *p) {
      return p ? new(p) ::IsotopeDB[nElements] : new ::IsotopeDB[nElements];
   }
   // Wrapper around operator delete
   static void delete_IsotopeDB(void *p) {
      delete ((::IsotopeDB*)p);
   }
   static void deleteArray_IsotopeDB(void *p) {
      delete [] ((::IsotopeDB*)p);
   }
   static void destruct_IsotopeDB(void *p) {
      typedef ::IsotopeDB current_t;
      ((current_t*)p)->~current_t();
   }
   // Wrapper around a custom streamer member function.
   static void streamer_IsotopeDB(TBuffer &buf, void *obj) {
      ((::IsotopeDB*)obj)->::IsotopeDB::Streamer(buf);
   }
} // end of namespace ROOT for class ::IsotopeDB

namespace ROOT {
   void vectorlEIsotopegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEIsotopegR_Dictionary();
   static void *new_vectorlEIsotopegR(void *p = 0);
   static void *newArray_vectorlEIsotopegR(Long_t size, void *p);
   static void delete_vectorlEIsotopegR(void *p);
   static void deleteArray_vectorlEIsotopegR(void *p);
   static void destruct_vectorlEIsotopegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<Isotope>*)
   {
      vector<Isotope> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<Isotope>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<Isotope>", -2, "/usr/local/root_v5.32.00/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<Isotope>), DefineBehavior(ptr, ptr),
                  0, &vectorlEIsotopegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<Isotope>) );
      instance.SetNew(&new_vectorlEIsotopegR);
      instance.SetNewArray(&newArray_vectorlEIsotopegR);
      instance.SetDelete(&delete_vectorlEIsotopegR);
      instance.SetDeleteArray(&deleteArray_vectorlEIsotopegR);
      instance.SetDestructor(&destruct_vectorlEIsotopegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<Isotope> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<Isotope>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEIsotopegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<Isotope>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEIsotopegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Isotope> : new vector<Isotope>;
   }
   static void *newArray_vectorlEIsotopegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<Isotope>[nElements] : new vector<Isotope>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEIsotopegR(void *p) {
      delete ((vector<Isotope>*)p);
   }
   static void deleteArray_vectorlEIsotopegR(void *p) {
      delete [] ((vector<Isotope>*)p);
   }
   static void destruct_vectorlEIsotopegR(void *p) {
      typedef vector<Isotope> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<Isotope>

namespace ROOT {
   void vectorlESourceDatamUgR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlESourceDatamUgR_Dictionary();
   static void *new_vectorlESourceDatamUgR(void *p = 0);
   static void *newArray_vectorlESourceDatamUgR(Long_t size, void *p);
   static void delete_vectorlESourceDatamUgR(void *p);
   static void deleteArray_vectorlESourceDatamUgR(void *p);
   static void destruct_vectorlESourceDatamUgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<SourceData*>*)
   {
      vector<SourceData*> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<SourceData*>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<SourceData*>", -2, "/usr/local/root_v5.32.00/cint/cint/lib/prec_stl/vector", 49,
                  typeid(vector<SourceData*>), DefineBehavior(ptr, ptr),
                  0, &vectorlESourceDatamUgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<SourceData*>) );
      instance.SetNew(&new_vectorlESourceDatamUgR);
      instance.SetNewArray(&newArray_vectorlESourceDatamUgR);
      instance.SetDelete(&delete_vectorlESourceDatamUgR);
      instance.SetDeleteArray(&deleteArray_vectorlESourceDatamUgR);
      instance.SetDestructor(&destruct_vectorlESourceDatamUgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<SourceData*> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<SourceData*>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlESourceDatamUgR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<SourceData*>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlESourceDatamUgR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SourceData*> : new vector<SourceData*>;
   }
   static void *newArray_vectorlESourceDatamUgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<SourceData*>[nElements] : new vector<SourceData*>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlESourceDatamUgR(void *p) {
      delete ((vector<SourceData*>*)p);
   }
   static void deleteArray_vectorlESourceDatamUgR(void *p) {
      delete [] ((vector<SourceData*>*)p);
   }
   static void destruct_vectorlESourceDatamUgR(void *p) {
      typedef vector<SourceData*> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<SourceData*>

namespace ROOT {
   void vectorlEdoublegR_ShowMembers(void *obj, TMemberInspector &R__insp);
   static void vectorlEdoublegR_Dictionary();
   static void *new_vectorlEdoublegR(void *p = 0);
   static void *newArray_vectorlEdoublegR(Long_t size, void *p);
   static void delete_vectorlEdoublegR(void *p);
   static void deleteArray_vectorlEdoublegR(void *p);
   static void destruct_vectorlEdoublegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<double>*)
   {
      vector<double> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<double>),0);
      static ::ROOT::TGenericClassInfo 
         instance("vector<double>", -2, "vector.dll", 0,
                  typeid(vector<double>), DefineBehavior(ptr, ptr),
                  0, &vectorlEdoublegR_Dictionary, isa_proxy, 0,
                  sizeof(vector<double>) );
      instance.SetNew(&new_vectorlEdoublegR);
      instance.SetNewArray(&newArray_vectorlEdoublegR);
      instance.SetDelete(&delete_vectorlEdoublegR);
      instance.SetDeleteArray(&deleteArray_vectorlEdoublegR);
      instance.SetDestructor(&destruct_vectorlEdoublegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<double> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_(Init) = GenerateInitInstanceLocal((const vector<double>*)0x0); R__UseDummy(_R__UNIQUE_(Init));

   // Dictionary for non-ClassDef classes
   static void vectorlEdoublegR_Dictionary() {
      ::ROOT::GenerateInitInstanceLocal((const vector<double>*)0x0)->GetClass();
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEdoublegR(void *p) {
      return  p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double> : new vector<double>;
   }
   static void *newArray_vectorlEdoublegR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::TOperatorNewHelper*)p) vector<double>[nElements] : new vector<double>[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEdoublegR(void *p) {
      delete ((vector<double>*)p);
   }
   static void deleteArray_vectorlEdoublegR(void *p) {
      delete [] ((vector<double>*)p);
   }
   static void destruct_vectorlEdoublegR(void *p) {
      typedef vector<double> current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<double>

/********************************************************
* MCA_dataDict.cxx
* CAUTION: DON'T CHANGE THIS FILE. THIS FILE IS AUTOMATICALLY GENERATED
*          FROM HEADER FILES LISTED IN G__setup_cpp_environmentXXX().
*          CHANGE THOSE HEADER FILES AND REGENERATE THIS FILE.
********************************************************/

#ifdef G__MEMTEST
#undef malloc
#undef free
#endif

#if defined(__GNUC__) && __GNUC__ >= 4 && ((__GNUC_MINOR__ == 2 && __GNUC_PATCHLEVEL__ >= 1) || (__GNUC_MINOR__ >= 3))
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif

extern "C" void G__cpp_reset_tagtableMCA_dataDict();

extern "C" void G__set_cpp_environmentMCA_dataDict() {
  G__cpp_reset_tagtableMCA_dataDict();
}
#include <new>
extern "C" int G__cpp_dllrevMCA_dataDict() { return(30051515); }

/*********************************************************
* Member function Interface Method
*********************************************************/

/* MCA_data */
static int G__MCA_dataDict_211_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCA_data* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new MCA_data((const char*) G__int(libp->para[0]));
   } else {
     p = new((void*) gvp) MCA_data((const char*) G__int(libp->para[0]));
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MCA_dataDictLN_MCA_data));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCA_data* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCA_data[n];
     } else {
       p = new((void*) gvp) MCA_data[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new MCA_data;
     } else {
       p = new((void*) gvp) MCA_data;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MCA_dataDictLN_MCA_data));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MCA_data*) G__getstructoffset())->GetRealTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((MCA_data*) G__getstructoffset())->GetLiveTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((MCA_data*) G__getstructoffset())->GetStartTime());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCA_data*) G__getstructoffset())->GetChannels());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MCA_data*) G__getstructoffset())->GetData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((MCA_data*) G__getstructoffset())->GetNormalizedData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCA_data*) G__getstructoffset())->SetRealTime((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCA_data*) G__getstructoffset())->SetLiveTime((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCA_data*) G__getstructoffset())->SetStartTime((time_t) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCA_data*) G__getstructoffset())->SetChannels((int) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCA_data*) G__getstructoffset())->SetData((TH1I*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCA_data*) G__getstructoffset())->Read((char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCA_data*) G__getstructoffset())->Read_IEC((char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((MCA_data*) G__getstructoffset())->Read_CNF((char*) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((MCA_data*) G__getstructoffset())->GetOutputFilename());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) ((MCA_data*) G__getstructoffset())->GetBasename());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) MCA_data::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCA_data::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) MCA_data::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      MCA_data::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((MCA_data*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCA_data::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_28(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCA_data::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_29(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) MCA_data::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_211_0_30(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) MCA_data::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCA_dataDict_211_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   MCA_data* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new MCA_data(*(MCA_data*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MCA_dataDictLN_MCA_data));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef MCA_data G__TMCA_data;
static int G__MCA_dataDict_211_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (MCA_data*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((MCA_data*) (soff+(sizeof(MCA_data)*i)))->~G__TMCA_data();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (MCA_data*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((MCA_data*) (soff))->~G__TMCA_data();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCA_dataDict_211_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   MCA_data* dest = (MCA_data*) G__getstructoffset();
   *dest = *(MCA_data*) libp->para[0].ref;
   const MCA_data& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* CalMCA_data */
static int G__MCA_dataDict_212_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((CalMCA_data*) G__getstructoffset())->GetCalData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_212_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CalMCA_data*) G__getstructoffset())->SetCalData((TH1D*) G__int(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_212_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CalMCA_data* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CalMCA_data[n];
     } else {
       p = new((void*) gvp) CalMCA_data[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new CalMCA_data;
     } else {
       p = new((void*) gvp) CalMCA_data;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MCA_dataDictLN_CalMCA_data));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_212_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CalMCA_data*) G__getstructoffset())->Analyse();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_212_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CalMCA_data* p = NULL;
   char* gvp = (char*) G__getgvp();
   //m: 1
   if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
     p = new CalMCA_data(*(MCA_data*) libp->para[0].ref);
   } else {
     p = new((void*) gvp) CalMCA_data(*(MCA_data*) libp->para[0].ref);
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MCA_dataDictLN_CalMCA_data));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_212_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) CalMCA_data::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_212_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CalMCA_data::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_212_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) CalMCA_data::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_212_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      CalMCA_data::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_212_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((CalMCA_data*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_212_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CalMCA_data::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_212_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) CalMCA_data::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_212_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) CalMCA_data::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_212_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) CalMCA_data::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCA_dataDict_212_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   CalMCA_data* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new CalMCA_data(*(CalMCA_data*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MCA_dataDictLN_CalMCA_data));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef CalMCA_data G__TCalMCA_data;
static int G__MCA_dataDict_212_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (CalMCA_data*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((CalMCA_data*) (soff+(sizeof(CalMCA_data)*i)))->~G__TCalMCA_data();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (CalMCA_data*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((CalMCA_data*) (soff))->~G__TCalMCA_data();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCA_dataDict_212_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   CalMCA_data* dest = (CalMCA_data*) G__getstructoffset();
   *dest = *(CalMCA_data*) libp->para[0].ref;
   const CalMCA_data& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* SourceData */
static int G__MCA_dataDict_213_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((SourceData*) G__getstructoffset())->GetFilename();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((SourceData*) G__getstructoffset())->GetIsotopeName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SourceData*) G__getstructoffset())->GetEnergy((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SourceData*) G__getstructoffset())->GetIntensity((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((SourceData*) G__getstructoffset())->GetNumLines());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 108, (long) ((SourceData*) G__getstructoffset())->GetReferenceDate());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SourceData*) G__getstructoffset())->GetSourceStrength());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SourceData*) G__getstructoffset())->GetHalfLife());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((SourceData*) G__getstructoffset())->InitCo60(*((TString*) G__int(libp->para[0])), (bool) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((SourceData*) G__getstructoffset())->InitCo60(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SourceData*) G__getstructoffset())->InitCo57(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SourceData*) G__getstructoffset())->InitMn54(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((SourceData*) G__getstructoffset())->InitBa133(*((TString*) G__int(libp->para[0])), (bool) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((SourceData*) G__getstructoffset())->InitBa133(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SourceData*) G__getstructoffset())->InitCd109(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((SourceData*) G__getstructoffset())->InitCs137(*((TString*) G__int(libp->para[0])), (bool) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((SourceData*) G__getstructoffset())->InitCs137(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SourceData*) G__getstructoffset())->InitFe55(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SourceData*) G__getstructoffset())->InitSr90(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SourceData*) G__getstructoffset())->InitTl204(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SourceData*) G__getstructoffset())->InitZn65(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   switch (libp->paran) {
   case 2:
      ((SourceData*) G__getstructoffset())->InitAm241(*((TString*) G__int(libp->para[0])), (bool) G__int(libp->para[1]));
      G__setnull(result7);
      break;
   case 1:
      ((SourceData*) G__getstructoffset())->InitAm241(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
      break;
   }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SourceData*) G__getstructoffset())->SetChannelNumber((int) G__int(libp->para[0]), (double) G__double(libp->para[1]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((SourceData*) G__getstructoffset())->GetChannelNumber((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((SourceData*) G__getstructoffset())->GetData());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) SourceData::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SourceData::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_26(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) SourceData::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_27(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      SourceData::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_31(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((SourceData*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_32(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SourceData::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_33(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SourceData::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_34(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) SourceData::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_213_0_35(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) SourceData::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic default constructor
static int G__MCA_dataDict_213_0_36(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SourceData *p;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SourceData[n];
     } else {
       p = new((void*) gvp) SourceData[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new SourceData;
     } else {
       p = new((void*) gvp) SourceData;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MCA_dataDictLN_SourceData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCA_dataDict_213_0_37(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   SourceData* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new SourceData(*(SourceData*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MCA_dataDictLN_SourceData));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef SourceData G__TSourceData;
static int G__MCA_dataDict_213_0_38(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (SourceData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((SourceData*) (soff+(sizeof(SourceData)*i)))->~G__TSourceData();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (SourceData*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((SourceData*) (soff))->~G__TSourceData();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCA_dataDict_213_0_39(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   SourceData* dest = (SourceData*) G__getstructoffset();
   *dest = *(SourceData*) libp->para[0].ref;
   const SourceData& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* GeCalibrate */
static int G__MCA_dataDict_214_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GeCalibrate* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GeCalibrate[n];
     } else {
       p = new((void*) gvp) GeCalibrate[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new GeCalibrate;
     } else {
       p = new((void*) gvp) GeCalibrate;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MCA_dataDictLN_GeCalibrate));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_214_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GeCalibrate*) G__getstructoffset())->Init(*((vector<TString>*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_214_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GeCalibrate*) G__getstructoffset())->Calibrate();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_214_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) ((GeCalibrate*) G__getstructoffset())->ApplyCalibration(*((TString*) G__int(libp->para[0]))));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_214_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((GeCalibrate*) G__getstructoffset())->GetEnergyfromChannel((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_214_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((GeCalibrate*) G__getstructoffset())->GetChannelfromEnergy((double) G__double(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_214_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((GeCalibrate*) G__getstructoffset())->GetCalibrationDate();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_214_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((GeCalibrate*) G__getstructoffset())->FindFWHM((TH1I*) G__int(libp->para[0]), (double) G__double(libp->para[1])
, (double) G__double(libp->para[2])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_214_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) GeCalibrate::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_214_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GeCalibrate::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_214_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) GeCalibrate::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_214_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      GeCalibrate::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_214_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((GeCalibrate*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_214_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GeCalibrate::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_214_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GeCalibrate::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_214_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) GeCalibrate::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_214_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) GeCalibrate::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCA_dataDict_214_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   GeCalibrate* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new GeCalibrate(*(GeCalibrate*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MCA_dataDictLN_GeCalibrate));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef GeCalibrate G__TGeCalibrate;
static int G__MCA_dataDict_214_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (GeCalibrate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((GeCalibrate*) (soff+(sizeof(GeCalibrate)*i)))->~G__TGeCalibrate();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (GeCalibrate*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((GeCalibrate*) (soff))->~G__TGeCalibrate();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCA_dataDict_214_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   GeCalibrate* dest = (GeCalibrate*) G__getstructoffset();
   *dest = *(GeCalibrate*) libp->para[0].ref;
   const GeCalibrate& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* IsotopeDB */
static int G__MCA_dataDict_223_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   IsotopeDB* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new IsotopeDB[n];
     } else {
       p = new((void*) gvp) IsotopeDB[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new IsotopeDB;
     } else {
       p = new((void*) gvp) IsotopeDB;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MCA_dataDictLN_IsotopeDB));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_223_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((IsotopeDB*) G__getstructoffset())->Init();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_223_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((IsotopeDB*) G__getstructoffset())->InitFromFile(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_223_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Isotope& obj = ((IsotopeDB*) G__getstructoffset())->GetIsotopeByName(*((TString*) G__int(libp->para[0])));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_223_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Isotope& obj = ((IsotopeDB*) G__getstructoffset())->GetIsotopeByNumber((int) G__int(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_223_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         const Isotope& obj = ((IsotopeDB*) G__getstructoffset())->GetIsotopeByEnergy((double) G__double(libp->para[0]));
         result7->ref = (long) (&obj);
         result7->obj.i = (long) (&obj);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_223_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((IsotopeDB*) G__getstructoffset())->GetNumberofIsotopes());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_223_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) IsotopeDB::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_223_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) IsotopeDB::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_223_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) IsotopeDB::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_223_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      IsotopeDB::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_223_0_15(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((IsotopeDB*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_223_0_16(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) IsotopeDB::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_223_0_17(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) IsotopeDB::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_223_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) IsotopeDB::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_223_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) IsotopeDB::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCA_dataDict_223_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   IsotopeDB* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new IsotopeDB(*(IsotopeDB*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MCA_dataDictLN_IsotopeDB));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef IsotopeDB G__TIsotopeDB;
static int G__MCA_dataDict_223_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (IsotopeDB*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((IsotopeDB*) (soff+(sizeof(IsotopeDB)*i)))->~G__TIsotopeDB();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (IsotopeDB*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((IsotopeDB*) (soff))->~G__TIsotopeDB();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCA_dataDict_223_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   IsotopeDB* dest = (IsotopeDB*) G__getstructoffset();
   *dest = *(IsotopeDB*) libp->para[0].ref;
   const IsotopeDB& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Isotope */
static int G__MCA_dataDict_225_0_1(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Isotope* p = NULL;
   char* gvp = (char*) G__getgvp();
   int n = G__getaryconstruct();
   if (n) {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Isotope[n];
     } else {
       p = new((void*) gvp) Isotope[n];
     }
   } else {
     if ((gvp == (char*)G__PVOID) || (gvp == 0)) {
       p = new Isotope;
     } else {
       p = new((void*) gvp) Isotope;
     }
   }
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MCA_dataDictLN_Isotope));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_225_0_2(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) ((Isotope*) G__getstructoffset())->GetNumberofLines());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_225_0_3(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Isotope*) G__getstructoffset())->GetEnergy((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_225_0_4(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Isotope*) G__getstructoffset())->GetIntensity((int) G__int(libp->para[0])));
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_225_0_5(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Isotope*) G__getstructoffset())->SetEnergy((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_225_0_6(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Isotope*) G__getstructoffset())->SetIntensity((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_225_0_7(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Isotope*) G__getstructoffset())->SetHalfLife((double) G__double(libp->para[0]));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_225_0_8(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letdouble(result7, 100, (double) ((Isotope*) G__getstructoffset())->GetHalfLife());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_225_0_9(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      {
         TString* pobj;
         TString xobj = ((Isotope*) G__getstructoffset())->GetName();
         pobj = new TString(xobj);
         result7->obj.i = (long) ((void*) pobj);
         result7->ref = result7->obj.i;
         G__store_tempobject(*result7);
      }
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_225_0_10(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Isotope*) G__getstructoffset())->SetName(*((TString*) G__int(libp->para[0])));
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_225_0_11(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 85, (long) Isotope::Class());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_225_0_12(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Isotope::Class_Name());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_225_0_13(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 115, (long) Isotope::Class_Version());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_225_0_14(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      Isotope::Dictionary();
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_225_0_18(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      ((Isotope*) G__getstructoffset())->StreamerNVirtual(*(TBuffer*) libp->para[0].ref);
      G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_225_0_19(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Isotope::DeclFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_225_0_20(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Isotope::ImplFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_225_0_21(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 67, (long) Isotope::ImplFileName());
   return(1 || funcname || hash || result7 || libp) ;
}

static int G__MCA_dataDict_225_0_22(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
      G__letint(result7, 105, (long) Isotope::DeclFileLine());
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic copy constructor
static int G__MCA_dataDict_225_0_23(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)

{
   Isotope* p;
   void* tmp = (void*) G__int(libp->para[0]);
   p = new Isotope(*(Isotope*) tmp);
   result7->obj.i = (long) p;
   result7->ref = (long) p;
   G__set_tagnum(result7,G__get_linked_tagnum(&G__MCA_dataDictLN_Isotope));
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic destructor
typedef Isotope G__TIsotope;
static int G__MCA_dataDict_225_0_24(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   char* gvp = (char*) G__getgvp();
   long soff = G__getstructoffset();
   int n = G__getaryconstruct();
   //
   //has_a_delete: 1
   //has_own_delete1arg: 0
   //has_own_delete2arg: 0
   //
   if (!soff) {
     return(1);
   }
   if (n) {
     if (gvp == (char*)G__PVOID) {
       delete[] (Isotope*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       for (int i = n - 1; i >= 0; --i) {
         ((Isotope*) (soff+(sizeof(Isotope)*i)))->~G__TIsotope();
       }
       G__setgvp((long)gvp);
     }
   } else {
     if (gvp == (char*)G__PVOID) {
       delete (Isotope*) soff;
     } else {
       G__setgvp((long) G__PVOID);
       ((Isotope*) (soff))->~G__TIsotope();
       G__setgvp((long)gvp);
     }
   }
   G__setnull(result7);
   return(1 || funcname || hash || result7 || libp) ;
}

// automatic assignment operator
static int G__MCA_dataDict_225_0_25(G__value* result7, G__CONST char* funcname, struct G__param* libp, int hash)
{
   Isotope* dest = (Isotope*) G__getstructoffset();
   *dest = *(Isotope*) libp->para[0].ref;
   const Isotope& obj = *dest;
   result7->ref = (long) (&obj);
   result7->obj.i = (long) (&obj);
   return(1 || funcname || hash || result7 || libp) ;
}


/* Setting up global function */

/*********************************************************
* Member function Stub
*********************************************************/

/* MCA_data */

/* CalMCA_data */

/* SourceData */

/* GeCalibrate */

/* IsotopeDB */

/* Isotope */

/*********************************************************
* Global function Stub
*********************************************************/

/*********************************************************
* Get size of pointer to member function
*********************************************************/
class G__Sizep2memfuncMCA_dataDict {
 public:
  G__Sizep2memfuncMCA_dataDict(): p(&G__Sizep2memfuncMCA_dataDict::sizep2memfunc) {}
    size_t sizep2memfunc() { return(sizeof(p)); }
  private:
    size_t (G__Sizep2memfuncMCA_dataDict::*p)();
};

size_t G__get_sizep2memfuncMCA_dataDict()
{
  G__Sizep2memfuncMCA_dataDict a;
  G__setsizep2memfunc((int)a.sizep2memfunc());
  return((size_t)a.sizep2memfunc());
}


/*********************************************************
* virtual base class offset calculation interface
*********************************************************/

   /* Setting up class inheritance */

/*********************************************************
* Inheritance information setup/
*********************************************************/
extern "C" void G__cpp_setup_inheritanceMCA_dataDict() {

   /* Setting up class inheritance */
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCA_dataDictLN_MCA_data))) {
     MCA_data *G__Lderived;
     G__Lderived=(MCA_data*)0x1000;
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCA_dataDictLN_MCA_data),G__get_linked_tagnum(&G__MCA_dataDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCA_dataDictLN_MCA_data),G__get_linked_tagnum(&G__MCA_dataDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCA_dataDictLN_CalMCA_data))) {
     CalMCA_data *G__Lderived;
     G__Lderived=(CalMCA_data*)0x1000;
     {
       MCA_data *G__Lpbase=(MCA_data*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCA_dataDictLN_CalMCA_data),G__get_linked_tagnum(&G__MCA_dataDictLN_MCA_data),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
     {
       TNamed *G__Lpbase=(TNamed*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCA_dataDictLN_CalMCA_data),G__get_linked_tagnum(&G__MCA_dataDictLN_TNamed),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCA_dataDictLN_CalMCA_data),G__get_linked_tagnum(&G__MCA_dataDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,0);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCA_dataDictLN_SourceData))) {
     SourceData *G__Lderived;
     G__Lderived=(SourceData*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCA_dataDictLN_SourceData),G__get_linked_tagnum(&G__MCA_dataDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCA_dataDictLN_GeCalibrate))) {
     GeCalibrate *G__Lderived;
     G__Lderived=(GeCalibrate*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCA_dataDictLN_GeCalibrate),G__get_linked_tagnum(&G__MCA_dataDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCA_dataDictLN_IsotopeDB))) {
     IsotopeDB *G__Lderived;
     G__Lderived=(IsotopeDB*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCA_dataDictLN_IsotopeDB),G__get_linked_tagnum(&G__MCA_dataDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
   if(0==G__getnumbaseclass(G__get_linked_tagnum(&G__MCA_dataDictLN_Isotope))) {
     Isotope *G__Lderived;
     G__Lderived=(Isotope*)0x1000;
     {
       TObject *G__Lpbase=(TObject*)G__Lderived;
       G__inheritance_setup(G__get_linked_tagnum(&G__MCA_dataDictLN_Isotope),G__get_linked_tagnum(&G__MCA_dataDictLN_TObject),(long)G__Lpbase-(long)G__Lderived,1,1);
     }
   }
}

/*********************************************************
* typedef information setup/
*********************************************************/
extern "C" void G__cpp_setup_typetableMCA_dataDict() {

   /* Setting up typedef entry */
   G__search_typename2("Version_t",115,-1,0,-1);
   G__setnewtype(-1,"Class version identifier (short)",0);
   G__search_typename2("vector<ROOT::TSchemaHelper>",117,G__get_linked_tagnum(&G__MCA_dataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MCA_dataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MCA_dataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MCA_dataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MCA_dataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TVirtualArray*>",117,G__get_linked_tagnum(&G__MCA_dataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MCA_dataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MCA_dataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MCA_dataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MCA_dataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Float_t>",117,G__get_linked_tagnum(&G__MCA_dataDictLN_TVectorTlEfloatgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("TVectorT<Double_t>",117,G__get_linked_tagnum(&G__MCA_dataDictLN_TVectorTlEdoublegR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<SourceData*>",117,G__get_linked_tagnum(&G__MCA_dataDictLN_vectorlESourceDatamUcOallocatorlESourceDatamUgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MCA_dataDictLN_reverse_iteratorlEvectorlESourceDatamUcOallocatorlESourceDatamUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MCA_dataDictLN_vectorlESourceDatamUcOallocatorlESourceDatamUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MCA_dataDictLN_reverse_iteratorlEvectorlESourceDatamUcOallocatorlESourceDatamUgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MCA_dataDictLN_vectorlESourceDatamUcOallocatorlESourceDatamUgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<TString>",117,G__get_linked_tagnum(&G__MCA_dataDictLN_vectorlETStringcOallocatorlETStringgRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MCA_dataDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MCA_dataDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MCA_dataDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MCA_dataDictLN_vectorlETStringcOallocatorlETStringgRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("vector<Isotope>",117,G__get_linked_tagnum(&G__MCA_dataDictLN_vectorlEIsotopecOallocatorlEIsotopegRsPgR),0,-1);
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<const_iterator>",117,G__get_linked_tagnum(&G__MCA_dataDictLN_reverse_iteratorlEvectorlEIsotopecOallocatorlEIsotopegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MCA_dataDictLN_vectorlEIsotopecOallocatorlEIsotopegRsPgR));
   G__setnewtype(-1,NULL,0);
   G__search_typename2("reverse_iterator<iterator>",117,G__get_linked_tagnum(&G__MCA_dataDictLN_reverse_iteratorlEvectorlEIsotopecOallocatorlEIsotopegRsPgRcLcLiteratorgR),0,G__get_linked_tagnum(&G__MCA_dataDictLN_vectorlEIsotopecOallocatorlEIsotopegRsPgR));
   G__setnewtype(-1,NULL,0);
}

/*********************************************************
* Data Member information setup/
*********************************************************/

   /* Setting up class,struct,union tag member variable */

   /* MCA_data */
static void G__setup_memvarMCA_data(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCA_dataDictLN_MCA_data));
   { MCA_data *p; p=(MCA_data*)0x1000; if (p) { }
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"dreal_time=",0,"seconds");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"dlive_time=",0,"seconds");
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("time_t"),-1,4,"istart_time=",0,"run start time (UNIX time)");
   G__memvar_setup((void*)0,105,0,0,-1,-1,-1,4,"ichannels=",0,"MCA channels");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MCA_dataDictLN_TH1I),-1,-1,4,"hdata=",0,(char*)NULL);
   G__memvar_setup((void*)0,67,0,0,-1,-1,-1,4,"soutfilename=",0,"! internal name placeholder");
   G__memvar_setup((void*)0,67,0,0,-1,-1,-1,4,"sshortname=",0,"! internal basename placeholder");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MCA_dataDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* CalMCA_data */
static void G__setup_memvarCalMCA_data(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCA_dataDictLN_CalMCA_data));
   { CalMCA_data *p; p=(CalMCA_data*)0x1000; if (p) { }
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MCA_dataDictLN_TH1D),-1,-1,4,"hCalData=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MCA_dataDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* SourceData */
static void G__setup_memvarSourceData(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCA_dataDictLN_SourceData));
   { SourceData *p; p=(SourceData*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MCA_dataDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"vdGammaEnergy=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MCA_dataDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"vdLineIntensity=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MCA_dataDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"vdChannelNumber=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"dSourceStrength=",0,"activity in MBq");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"dHalfLife=",0,"in seconds");
   G__memvar_setup((void*)0,108,0,0,-1,G__defined_typename("time_t"),-1,4,"tReferenceDate=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MCA_dataDictLN_TString),-1,-1,4,"sIsotopeName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MCA_dataDictLN_TString),-1,-1,4,"sFileName=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MCA_dataDictLN_MCA_data),-1,-1,4,"data=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MCA_dataDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* GeCalibrate */
static void G__setup_memvarGeCalibrate(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCA_dataDictLN_GeCalibrate));
   { GeCalibrate *p; p=(GeCalibrate*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MCA_dataDictLN_vectorlESourceDatamUcOallocatorlESourceDatamUgRsPgR),G__defined_typename("vector<SourceData*>"),-1,4,"vpData=",0,(char*)NULL);
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MCA_dataDictLN_TGraphErrors),-1,-1,4,"calplot=",0,(char*)NULL);
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"dSlope=",0,"calibration constant");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"dOffset=",0,"calibration constant");
   G__memvar_setup((void*)0,103,0,0,-1,-1,-1,4,"valid_calibration=",0,(char*)NULL);
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MCA_dataDictLN_TString),-1,-1,4,"cal_date=",0,"! name tag for output file.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MCA_dataDictLN_TGraphErrors),-1,-1,4,"linplot=",0,"Plot to show deviation from linearity in the energy calibration");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MCA_dataDictLN_TGraphErrors),-1,-1,4,"effplot=",0,"Plot to show  efficiency as function of energy.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MCA_dataDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* IsotopeDB */
static void G__setup_memvarIsotopeDB(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCA_dataDictLN_IsotopeDB));
   { IsotopeDB *p; p=(IsotopeDB*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MCA_dataDictLN_vectorlEIsotopecOallocatorlEIsotopegRsPgR),G__defined_typename("vector<Isotope>"),-1,4,"vIdb=",0,"database (list) of all known and implemented isotopes.");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MCA_dataDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}


   /* Isotope */
static void G__setup_memvarIsotope(void) {
   G__tag_memvar_setup(G__get_linked_tagnum(&G__MCA_dataDictLN_Isotope));
   { Isotope *p; p=(Isotope*)0x1000; if (p) { }
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MCA_dataDictLN_TString),-1,-1,4,"tsname=",0,"isotope name");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MCA_dataDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"vdenergy=",0,"gamma lines (in keV)");
   G__memvar_setup((void*)0,117,0,0,G__get_linked_tagnum(&G__MCA_dataDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR),G__defined_typename("vector<double>"),-1,4,"vdintensity=",0,"intensity for each line (in %)");
   G__memvar_setup((void*)0,100,0,0,-1,-1,-1,4,"dhalflife=",0,"for the isotope in seconds;");
   G__memvar_setup((void*)0,85,0,0,G__get_linked_tagnum(&G__MCA_dataDictLN_TClass),-1,-2,4,"fgIsA=",0,(char*)NULL);
   }
   G__tag_memvar_reset();
}

extern "C" void G__cpp_setup_memvarMCA_dataDict() {
}
/***********************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
************************************************************
***********************************************************/

/*********************************************************
* Member function information setup for each class
*********************************************************/
static void G__setup_memfuncMCA_data(void) {
   /* MCA_data */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCA_dataDictLN_MCA_data));
   G__memfunc_setup("MCA_data",714,G__MCA_dataDict_211_0_1, 105, G__get_linked_tagnum(&G__MCA_dataDictLN_MCA_data), -1, 0, 1, 1, 1, 0, "C - - 10 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("MCA_data",714,G__MCA_dataDict_211_0_2, 105, G__get_linked_tagnum(&G__MCA_dataDictLN_MCA_data), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetRealTime",1075,G__MCA_dataDict_211_0_3, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetLiveTime",1087,G__MCA_dataDict_211_0_4, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetStartTime",1213,G__MCA_dataDict_211_0_5, 108, -1, G__defined_typename("time_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChannels",1100,G__MCA_dataDict_211_0_6, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__MCA_dataDict_211_0_7, 85, G__get_linked_tagnum(&G__MCA_dataDictLN_TH1I), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNormalizedData",1711,G__MCA_dataDict_211_0_8, 85, G__get_linked_tagnum(&G__MCA_dataDictLN_TH1D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetRealTime",1087,G__MCA_dataDict_211_0_9, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetLiveTime",1099,G__MCA_dataDict_211_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - v", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetStartTime",1225,G__MCA_dataDict_211_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "l - 'time_t' 0 - t", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChannels",1112,G__MCA_dataDict_211_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - c", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetData",678,G__MCA_dataDict_211_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TH1I' - 0 - h", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Read",380,G__MCA_dataDict_211_0_14, 105, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Read_IEC",684,G__MCA_dataDict_211_0_15, 105, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Read_CNF",690,G__MCA_dataDict_211_0_16, 105, -1, -1, 0, 1, 1, 1, 0, "C - - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetOutputFilename",1746,G__MCA_dataDict_211_0_17, 67, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetBasename",1084,G__MCA_dataDict_211_0_18, 67, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCA_dataDict_211_0_19, 85, G__get_linked_tagnum(&G__MCA_dataDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&MCA_data::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MCA_dataDict_211_0_20, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCA_data::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MCA_dataDict_211_0_21, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&MCA_data::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MCA_dataDict_211_0_22, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&MCA_data::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MCA_dataDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCA_dataDict_211_0_26, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCA_dataDict_211_0_27, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCA_data::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCA_dataDict_211_0_28, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCA_data::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCA_dataDict_211_0_29, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&MCA_data::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCA_dataDict_211_0_30, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&MCA_data::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("MCA_data", 714, G__MCA_dataDict_211_0_31, (int) ('i'), G__get_linked_tagnum(&G__MCA_dataDictLN_MCA_data), -1, 0, 1, 1, 1, 0, "u 'MCA_data' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~MCA_data", 840, G__MCA_dataDict_211_0_32, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCA_dataDict_211_0_33, (int) ('u'), G__get_linked_tagnum(&G__MCA_dataDictLN_MCA_data), -1, 1, 1, 1, 1, 0, "u 'MCA_data' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncCalMCA_data(void) {
   /* CalMCA_data */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCA_dataDictLN_CalMCA_data));
   G__memfunc_setup("GetCalData",938,G__MCA_dataDict_212_0_1, 85, G__get_linked_tagnum(&G__MCA_dataDictLN_TH1D), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetCalData",950,G__MCA_dataDict_212_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "U 'TH1D' - 0 - cald", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalMCA_data",986,G__MCA_dataDict_212_0_3, 105, G__get_linked_tagnum(&G__MCA_dataDictLN_CalMCA_data), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Analyse",717,G__MCA_dataDict_212_0_4, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("CalMCA_data",986,G__MCA_dataDict_212_0_5, 105, G__get_linked_tagnum(&G__MCA_dataDictLN_CalMCA_data), -1, 0, 1, 1, 1, 0, "u 'MCA_data' - 1 - dat", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCA_dataDict_212_0_6, 85, G__get_linked_tagnum(&G__MCA_dataDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&CalMCA_data::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MCA_dataDict_212_0_7, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CalMCA_data::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MCA_dataDict_212_0_8, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&CalMCA_data::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MCA_dataDict_212_0_9, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&CalMCA_data::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MCA_dataDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCA_dataDict_212_0_13, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCA_dataDict_212_0_14, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CalMCA_data::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCA_dataDict_212_0_15, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&CalMCA_data::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCA_dataDict_212_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&CalMCA_data::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCA_dataDict_212_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&CalMCA_data::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("CalMCA_data", 986, G__MCA_dataDict_212_0_18, (int) ('i'), G__get_linked_tagnum(&G__MCA_dataDictLN_CalMCA_data), -1, 0, 1, 1, 1, 0, "u 'CalMCA_data' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~CalMCA_data", 1112, G__MCA_dataDict_212_0_19, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCA_dataDict_212_0_20, (int) ('u'), G__get_linked_tagnum(&G__MCA_dataDictLN_CalMCA_data), -1, 1, 1, 1, 1, 0, "u 'CalMCA_data' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncSourceData(void) {
   /* SourceData */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCA_dataDictLN_SourceData));
   G__memfunc_setup("GetFile",672,(G__InterfaceMethod) NULL, 103, -1, -1, 0, 0, 1, 4, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetFilename",1089,G__MCA_dataDict_213_0_2, 117, G__get_linked_tagnum(&G__MCA_dataDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIsotopeName",1412,G__MCA_dataDict_213_0_3, 117, G__get_linked_tagnum(&G__MCA_dataDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnergy",906,G__MCA_dataDict_213_0_4, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - line", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIntensity",1255,G__MCA_dataDict_213_0_5, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - line", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumLines",1099,G__MCA_dataDict_213_0_6, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetReferenceDate",1581,G__MCA_dataDict_213_0_7, 108, -1, G__defined_typename("time_t"), 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetSourceStrength",1760,G__MCA_dataDict_213_0_8, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHalfLife",1051,G__MCA_dataDict_213_0_9, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitCo60",684,G__MCA_dataDict_213_0_10, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - filename g - - 0 'false' old", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitCo57",690,G__MCA_dataDict_213_0_11, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitMn54",696,G__MCA_dataDict_213_0_12, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitBa133",718,G__MCA_dataDict_213_0_13, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - filename g - - 0 'false' old", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitCd109",725,G__MCA_dataDict_213_0_14, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitCs137",741,G__MCA_dataDict_213_0_15, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - filename g - - 0 'false' old", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitFe55",681,G__MCA_dataDict_213_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitSr90",706,G__MCA_dataDict_213_0_17, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitTl204",746,G__MCA_dataDict_213_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitZn65",711,G__MCA_dataDict_213_0_19, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitAm241",729,G__MCA_dataDict_213_0_20, 121, -1, -1, 0, 2, 1, 1, 0, 
"u 'TString' - 0 - filename g - - 0 'false' old", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetChannelNumber",1614,G__MCA_dataDict_213_0_21, 121, -1, -1, 0, 2, 1, 1, 0, 
"i - - 0 - line d - - 0 - channel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChannelNumber",1602,G__MCA_dataDict_213_0_22, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - line", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetData",666,G__MCA_dataDict_213_0_23, 85, G__get_linked_tagnum(&G__MCA_dataDictLN_MCA_data), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCA_dataDict_213_0_24, 85, G__get_linked_tagnum(&G__MCA_dataDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&SourceData::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MCA_dataDict_213_0_25, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SourceData::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MCA_dataDict_213_0_26, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&SourceData::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MCA_dataDict_213_0_27, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&SourceData::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MCA_dataDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCA_dataDict_213_0_31, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCA_dataDict_213_0_32, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SourceData::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCA_dataDict_213_0_33, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SourceData::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCA_dataDict_213_0_34, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&SourceData::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCA_dataDict_213_0_35, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&SourceData::DeclFileLine) ), 0);
   // automatic default constructor
   G__memfunc_setup("SourceData", 1003, G__MCA_dataDict_213_0_36, (int) ('i'), G__get_linked_tagnum(&G__MCA_dataDictLN_SourceData), -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic copy constructor
   G__memfunc_setup("SourceData", 1003, G__MCA_dataDict_213_0_37, (int) ('i'), G__get_linked_tagnum(&G__MCA_dataDictLN_SourceData), -1, 0, 1, 1, 1, 0, "u 'SourceData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~SourceData", 1129, G__MCA_dataDict_213_0_38, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 0);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCA_dataDict_213_0_39, (int) ('u'), G__get_linked_tagnum(&G__MCA_dataDictLN_SourceData), -1, 1, 1, 1, 1, 0, "u 'SourceData' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncGeCalibrate(void) {
   /* GeCalibrate */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCA_dataDictLN_GeCalibrate));
   G__memfunc_setup("GeCalibrate",1075,G__MCA_dataDict_214_0_1, 105, G__get_linked_tagnum(&G__MCA_dataDictLN_GeCalibrate), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__MCA_dataDict_214_0_2, 121, -1, -1, 0, 1, 1, 1, 0, "u 'vector<TString,allocator<TString> >' 'vector<TString>' 0 - filenames", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Calibrate",903,G__MCA_dataDict_214_0_3, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("ApplyCalibration",1646,G__MCA_dataDict_214_0_4, 85, G__get_linked_tagnum(&G__MCA_dataDictLN_CalMCA_data), -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - filename", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnergyfromChannel",2039,G__MCA_dataDict_214_0_5, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - channel", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetChannelfromEnergy",2039,G__MCA_dataDict_214_0_6, 100, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetCalibrationDate",1798,G__MCA_dataDict_214_0_7, 117, G__get_linked_tagnum(&G__MCA_dataDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("FindFWHM",691,G__MCA_dataDict_214_0_8, 100, -1, -1, 0, 3, 1, 1, 0, 
"U 'TH1I' - 0 - data d - - 0 - X "
"d - - 0 - Y", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCA_dataDict_214_0_9, 85, G__get_linked_tagnum(&G__MCA_dataDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&GeCalibrate::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MCA_dataDict_214_0_10, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GeCalibrate::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MCA_dataDict_214_0_11, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&GeCalibrate::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MCA_dataDict_214_0_12, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&GeCalibrate::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MCA_dataDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCA_dataDict_214_0_16, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCA_dataDict_214_0_17, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GeCalibrate::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCA_dataDict_214_0_18, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GeCalibrate::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCA_dataDict_214_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&GeCalibrate::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCA_dataDict_214_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&GeCalibrate::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("GeCalibrate", 1075, G__MCA_dataDict_214_0_21, (int) ('i'), G__get_linked_tagnum(&G__MCA_dataDictLN_GeCalibrate), -1, 0, 1, 1, 1, 0, "u 'GeCalibrate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~GeCalibrate", 1201, G__MCA_dataDict_214_0_22, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCA_dataDict_214_0_23, (int) ('u'), G__get_linked_tagnum(&G__MCA_dataDictLN_GeCalibrate), -1, 1, 1, 1, 1, 0, "u 'GeCalibrate' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncIsotopeDB(void) {
   /* IsotopeDB */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCA_dataDictLN_IsotopeDB));
   G__memfunc_setup("IsotopeDB",873,G__MCA_dataDict_223_0_1, 105, G__get_linked_tagnum(&G__MCA_dataDictLN_IsotopeDB), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Init",404,G__MCA_dataDict_223_0_2, 121, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("InitFromFile",1192,G__MCA_dataDict_223_0_3, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - fn", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIsotopeByName",1599,G__MCA_dataDict_223_0_4, 117, G__get_linked_tagnum(&G__MCA_dataDictLN_Isotope), -1, 1, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIsotopeByNumber",1831,G__MCA_dataDict_223_0_5, 117, G__get_linked_tagnum(&G__MCA_dataDictLN_Isotope), -1, 1, 1, 1, 1, 0, "i - - 0 - n", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIsotopeByEnergy",1832,G__MCA_dataDict_223_0_6, 117, G__get_linked_tagnum(&G__MCA_dataDictLN_Isotope), -1, 1, 1, 1, 1, 0, "d - - 0 - e", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberofIsotopes",1972,G__MCA_dataDict_223_0_7, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCA_dataDict_223_0_8, 85, G__get_linked_tagnum(&G__MCA_dataDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&IsotopeDB::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MCA_dataDict_223_0_9, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&IsotopeDB::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MCA_dataDict_223_0_10, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&IsotopeDB::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MCA_dataDict_223_0_11, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&IsotopeDB::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MCA_dataDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCA_dataDict_223_0_15, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCA_dataDict_223_0_16, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&IsotopeDB::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCA_dataDict_223_0_17, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&IsotopeDB::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCA_dataDict_223_0_18, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&IsotopeDB::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCA_dataDict_223_0_19, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&IsotopeDB::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("IsotopeDB", 873, G__MCA_dataDict_223_0_20, (int) ('i'), G__get_linked_tagnum(&G__MCA_dataDictLN_IsotopeDB), -1, 0, 1, 1, 1, 0, "u 'IsotopeDB' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~IsotopeDB", 999, G__MCA_dataDict_223_0_21, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCA_dataDict_223_0_22, (int) ('u'), G__get_linked_tagnum(&G__MCA_dataDictLN_IsotopeDB), -1, 1, 1, 1, 1, 0, "u 'IsotopeDB' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}

static void G__setup_memfuncIsotope(void) {
   /* Isotope */
   G__tag_memfunc_setup(G__get_linked_tagnum(&G__MCA_dataDictLN_Isotope));
   G__memfunc_setup("Isotope",739,G__MCA_dataDict_225_0_1, 105, G__get_linked_tagnum(&G__MCA_dataDictLN_Isotope), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetNumberofLines",1625,G__MCA_dataDict_225_0_2, 105, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetEnergy",906,G__MCA_dataDict_225_0_3, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - line", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetIntensity",1255,G__MCA_dataDict_225_0_4, 100, -1, -1, 0, 1, 1, 1, 0, "i - - 0 - line", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetEnergy",918,G__MCA_dataDict_225_0_5, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - energy", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetIntensity",1267,G__MCA_dataDict_225_0_6, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - intensity", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetHalfLife",1063,G__MCA_dataDict_225_0_7, 121, -1, -1, 0, 1, 1, 1, 0, "d - - 0 - halflife", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetHalfLife",1051,G__MCA_dataDict_225_0_8, 100, -1, -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("GetName",673,G__MCA_dataDict_225_0_9, 117, G__get_linked_tagnum(&G__MCA_dataDictLN_TString), -1, 0, 0, 1, 1, 0, "", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("SetName",685,G__MCA_dataDict_225_0_10, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TString' - 0 - name", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("Class",502,G__MCA_dataDict_225_0_11, 85, G__get_linked_tagnum(&G__MCA_dataDictLN_TClass), -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (TClass* (*)())(&Isotope::Class) ), 0);
   G__memfunc_setup("Class_Name",982,G__MCA_dataDict_225_0_12, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Isotope::Class_Name) ), 0);
   G__memfunc_setup("Class_Version",1339,G__MCA_dataDict_225_0_13, 115, -1, G__defined_typename("Version_t"), 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (Version_t (*)())(&Isotope::Class_Version) ), 0);
   G__memfunc_setup("Dictionary",1046,G__MCA_dataDict_225_0_14, 121, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (void (*)())(&Isotope::Dictionary) ), 0);
   G__memfunc_setup("IsA",253,(G__InterfaceMethod) NULL,85, G__get_linked_tagnum(&G__MCA_dataDictLN_TClass), -1, 0, 0, 1, 1, 8, "", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("ShowMembers",1132,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TMemberInspector' - 1 - insp", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("Streamer",835,(G__InterfaceMethod) NULL,121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 1);
   G__memfunc_setup("StreamerNVirtual",1656,G__MCA_dataDict_225_0_18, 121, -1, -1, 0, 1, 1, 1, 0, "u 'TBuffer' - 1 - b", (char*)NULL, (void*) NULL, 0);
   G__memfunc_setup("DeclFileName",1145,G__MCA_dataDict_225_0_19, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Isotope::DeclFileName) ), 0);
   G__memfunc_setup("ImplFileLine",1178,G__MCA_dataDict_225_0_20, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Isotope::ImplFileLine) ), 0);
   G__memfunc_setup("ImplFileName",1171,G__MCA_dataDict_225_0_21, 67, -1, -1, 0, 0, 3, 1, 1, "", (char*)NULL, (void*) G__func2void( (const char* (*)())(&Isotope::ImplFileName) ), 0);
   G__memfunc_setup("DeclFileLine",1152,G__MCA_dataDict_225_0_22, 105, -1, -1, 0, 0, 3, 1, 0, "", (char*)NULL, (void*) G__func2void( (int (*)())(&Isotope::DeclFileLine) ), 0);
   // automatic copy constructor
   G__memfunc_setup("Isotope", 739, G__MCA_dataDict_225_0_23, (int) ('i'), G__get_linked_tagnum(&G__MCA_dataDictLN_Isotope), -1, 0, 1, 1, 1, 0, "u 'Isotope' - 11 - -", (char*) NULL, (void*) NULL, 0);
   // automatic destructor
   G__memfunc_setup("~Isotope", 865, G__MCA_dataDict_225_0_24, (int) ('y'), -1, -1, 0, 0, 1, 1, 0, "", (char*) NULL, (void*) NULL, 1);
   // automatic assignment operator
   G__memfunc_setup("operator=", 937, G__MCA_dataDict_225_0_25, (int) ('u'), G__get_linked_tagnum(&G__MCA_dataDictLN_Isotope), -1, 1, 1, 1, 1, 0, "u 'Isotope' - 11 - -", (char*) NULL, (void*) NULL, 0);
   G__tag_memfunc_reset();
}


/*********************************************************
* Member function information setup
*********************************************************/
extern "C" void G__cpp_setup_memfuncMCA_dataDict() {
}

/*********************************************************
* Global variable information setup for each class
*********************************************************/
static void G__cpp_setup_global0() {

   /* Setting up global variables */
   G__resetplocal();

}

static void G__cpp_setup_global1() {

   G__resetglobalenv();
}
extern "C" void G__cpp_setup_globalMCA_dataDict() {
  G__cpp_setup_global0();
  G__cpp_setup_global1();
}

/*********************************************************
* Global function information setup for each class
*********************************************************/
static void G__cpp_setup_func0() {
   G__lastifuncposition();

}

static void G__cpp_setup_func1() {
}

static void G__cpp_setup_func2() {
}

static void G__cpp_setup_func3() {
}

static void G__cpp_setup_func4() {
}

static void G__cpp_setup_func5() {
}

static void G__cpp_setup_func6() {
}

static void G__cpp_setup_func7() {
}

static void G__cpp_setup_func8() {
}

static void G__cpp_setup_func9() {
}

static void G__cpp_setup_func10() {
}

static void G__cpp_setup_func11() {
}

static void G__cpp_setup_func12() {
}

static void G__cpp_setup_func13() {
}

static void G__cpp_setup_func14() {
}

static void G__cpp_setup_func15() {

   G__resetifuncposition();
}

extern "C" void G__cpp_setup_funcMCA_dataDict() {
  G__cpp_setup_func0();
  G__cpp_setup_func1();
  G__cpp_setup_func2();
  G__cpp_setup_func3();
  G__cpp_setup_func4();
  G__cpp_setup_func5();
  G__cpp_setup_func6();
  G__cpp_setup_func7();
  G__cpp_setup_func8();
  G__cpp_setup_func9();
  G__cpp_setup_func10();
  G__cpp_setup_func11();
  G__cpp_setup_func12();
  G__cpp_setup_func13();
  G__cpp_setup_func14();
  G__cpp_setup_func15();
}

/*********************************************************
* Class,struct,union,enum tag information setup
*********************************************************/
/* Setup class/struct taginfo */
G__linked_taginfo G__MCA_dataDictLN_TClass = { "TClass" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_TBuffer = { "TBuffer" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_TMemberInspector = { "TMemberInspector" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_TObject = { "TObject" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_TNamed = { "TNamed" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_TString = { "TString" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR = { "vector<double,allocator<double> >" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR = { "vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR = { "reverse_iterator<vector<ROOT::TSchemaHelper,allocator<ROOT::TSchemaHelper> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR = { "vector<TVirtualArray*,allocator<TVirtualArray*> >" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TVirtualArray*,allocator<TVirtualArray*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_TVectorTlEfloatgR = { "TVectorT<float>" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_TVectorTlEdoublegR = { "TVectorT<double>" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_TH1D = { "TH1D" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_TH1I = { "TH1I" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_TGraphErrors = { "TGraphErrors" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_MCA_data = { "MCA_data" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_CalMCA_data = { "CalMCA_data" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_SourceData = { "SourceData" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_GeCalibrate = { "GeCalibrate" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_vectorlESourceDatamUcOallocatorlESourceDatamUgRsPgR = { "vector<SourceData*,allocator<SourceData*> >" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_reverse_iteratorlEvectorlESourceDatamUcOallocatorlESourceDatamUgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<SourceData*,allocator<SourceData*> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_vectorlETStringcOallocatorlETStringgRsPgR = { "vector<TString,allocator<TString> >" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR = { "reverse_iterator<vector<TString,allocator<TString> >::iterator>" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_IsotopeDB = { "IsotopeDB" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_Isotope = { "Isotope" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_vectorlEIsotopecOallocatorlEIsotopegRsPgR = { "vector<Isotope,allocator<Isotope> >" , 99 , -1 };
G__linked_taginfo G__MCA_dataDictLN_reverse_iteratorlEvectorlEIsotopecOallocatorlEIsotopegRsPgRcLcLiteratorgR = { "reverse_iterator<vector<Isotope,allocator<Isotope> >::iterator>" , 99 , -1 };

/* Reset class/struct taginfo */
extern "C" void G__cpp_reset_tagtableMCA_dataDict() {
  G__MCA_dataDictLN_TClass.tagnum = -1 ;
  G__MCA_dataDictLN_TBuffer.tagnum = -1 ;
  G__MCA_dataDictLN_TMemberInspector.tagnum = -1 ;
  G__MCA_dataDictLN_TObject.tagnum = -1 ;
  G__MCA_dataDictLN_TNamed.tagnum = -1 ;
  G__MCA_dataDictLN_TString.tagnum = -1 ;
  G__MCA_dataDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR.tagnum = -1 ;
  G__MCA_dataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR.tagnum = -1 ;
  G__MCA_dataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MCA_dataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR.tagnum = -1 ;
  G__MCA_dataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MCA_dataDictLN_TVectorTlEfloatgR.tagnum = -1 ;
  G__MCA_dataDictLN_TVectorTlEdoublegR.tagnum = -1 ;
  G__MCA_dataDictLN_TH1D.tagnum = -1 ;
  G__MCA_dataDictLN_TH1I.tagnum = -1 ;
  G__MCA_dataDictLN_TGraphErrors.tagnum = -1 ;
  G__MCA_dataDictLN_MCA_data.tagnum = -1 ;
  G__MCA_dataDictLN_CalMCA_data.tagnum = -1 ;
  G__MCA_dataDictLN_SourceData.tagnum = -1 ;
  G__MCA_dataDictLN_GeCalibrate.tagnum = -1 ;
  G__MCA_dataDictLN_vectorlESourceDatamUcOallocatorlESourceDatamUgRsPgR.tagnum = -1 ;
  G__MCA_dataDictLN_reverse_iteratorlEvectorlESourceDatamUcOallocatorlESourceDatamUgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MCA_dataDictLN_vectorlETStringcOallocatorlETStringgRsPgR.tagnum = -1 ;
  G__MCA_dataDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR.tagnum = -1 ;
  G__MCA_dataDictLN_IsotopeDB.tagnum = -1 ;
  G__MCA_dataDictLN_Isotope.tagnum = -1 ;
  G__MCA_dataDictLN_vectorlEIsotopecOallocatorlEIsotopegRsPgR.tagnum = -1 ;
  G__MCA_dataDictLN_reverse_iteratorlEvectorlEIsotopecOallocatorlEIsotopegRsPgRcLcLiteratorgR.tagnum = -1 ;
}


extern "C" void G__cpp_setup_tagtableMCA_dataDict() {

   /* Setting up class,struct,union tag entry */
   G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_TClass);
   G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_TBuffer);
   G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_TMemberInspector);
   G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_TObject);
   G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_TNamed);
   G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_TString);
   G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_vectorlEdoublecOallocatorlEdoublegRsPgR);
   G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_vectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgR);
   G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_reverse_iteratorlEvectorlEROOTcLcLTSchemaHelpercOallocatorlEROOTcLcLTSchemaHelpergRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_vectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_reverse_iteratorlEvectorlETVirtualArraymUcOallocatorlETVirtualArraymUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_TVectorTlEfloatgR);
   G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_TVectorTlEdoublegR);
   G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_TH1D);
   G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_TH1I);
   G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_TGraphErrors);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_MCA_data),sizeof(MCA_data),-1,324864,(char*)NULL,G__setup_memvarMCA_data,G__setup_memfuncMCA_data);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_CalMCA_data),sizeof(CalMCA_data),-1,324864,(char*)NULL,G__setup_memvarCalMCA_data,G__setup_memfuncCalMCA_data);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_SourceData),sizeof(SourceData),-1,290816,(char*)NULL,G__setup_memvarSourceData,G__setup_memfuncSourceData);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_GeCalibrate),sizeof(GeCalibrate),-1,292096,(char*)NULL,G__setup_memvarGeCalibrate,G__setup_memfuncGeCalibrate);
   G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_vectorlESourceDatamUcOallocatorlESourceDatamUgRsPgR);
   G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_reverse_iteratorlEvectorlESourceDatamUcOallocatorlESourceDatamUgRsPgRcLcLiteratorgR);
   G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_vectorlETStringcOallocatorlETStringgRsPgR);
   G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_reverse_iteratorlEvectorlETStringcOallocatorlETStringgRsPgRcLcLiteratorgR);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_IsotopeDB),sizeof(IsotopeDB),-1,29952,(char*)NULL,G__setup_memvarIsotopeDB,G__setup_memfuncIsotopeDB);
   G__tagtable_setup(G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_Isotope),sizeof(Isotope),-1,29952,(char*)NULL,G__setup_memvarIsotope,G__setup_memfuncIsotope);
   G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_vectorlEIsotopecOallocatorlEIsotopegRsPgR);
   G__get_linked_tagnum_fwd(&G__MCA_dataDictLN_reverse_iteratorlEvectorlEIsotopecOallocatorlEIsotopegRsPgRcLcLiteratorgR);
}
extern "C" void G__cpp_setupMCA_dataDict(void) {
  G__check_setup_version(30051515,"G__cpp_setupMCA_dataDict()");
  G__set_cpp_environmentMCA_dataDict();
  G__cpp_setup_tagtableMCA_dataDict();

  G__cpp_setup_inheritanceMCA_dataDict();

  G__cpp_setup_typetableMCA_dataDict();

  G__cpp_setup_memvarMCA_dataDict();

  G__cpp_setup_memfuncMCA_dataDict();
  G__cpp_setup_globalMCA_dataDict();
  G__cpp_setup_funcMCA_dataDict();

   if(0==G__getsizep2memfunc()) G__get_sizep2memfuncMCA_dataDict();
  return;
}
class G__cpp_setup_initMCA_dataDict {
  public:
    G__cpp_setup_initMCA_dataDict() { G__add_setup_func("MCA_dataDict",(G__incsetup)(&G__cpp_setupMCA_dataDict)); G__call_setup_funcs(); }
   ~G__cpp_setup_initMCA_dataDict() { G__remove_setup_func("MCA_dataDict"); }
};
G__cpp_setup_initMCA_dataDict G__cpp_setup_initializerMCA_dataDict;

